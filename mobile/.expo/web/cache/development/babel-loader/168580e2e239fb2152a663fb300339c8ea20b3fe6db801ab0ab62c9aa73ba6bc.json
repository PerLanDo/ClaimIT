{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { Provider as PaperProvider } from 'react-native-paper';\nimport { Ionicons } from '@expo/vector-icons';\nimport Toast from 'react-native-toast-message';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { AuthProvider, useAuth } from \"./src/context/AuthContext\";\nimport { theme } from \"./src/theme/theme\";\nimport LoginScreen from \"./src/screens/auth/LoginScreen\";\nimport DashboardScreen from \"./src/screens/main/DashboardScreen\";\nimport ItemDetailScreen from \"./src/screens/main/ItemDetailScreen\";\nimport ReportItemScreen from \"./src/screens/main/ReportItemScreen\";\nimport ClaimProcessScreen from \"./src/screens/main/ClaimProcessScreen\";\nimport MessagesScreen from \"./src/screens/main/MessagesScreen\";\nimport ProfileScreen from \"./src/screens/main/ProfileScreen\";\nimport AdminDashboardScreen from \"./src/screens/admin/AdminDashboardScreen\";\nimport AdminItemsScreen from \"./src/screens/admin/AdminItemsScreen\";\nimport AdminClaimsScreen from \"./src/screens/admin/AdminClaimsScreen\";\nimport AdminUsersScreen from \"./src/screens/admin/AdminUsersScreen\";\nimport CustomDrawerContent from \"./src/components/CustomDrawerContent\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nSplashScreen.preventAutoHideAsync();\nvar Stack = createNativeStackNavigator();\nvar Tab = createBottomTabNavigator();\nvar Drawer = createDrawerNavigator();\nfunction MainTabNavigator() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref) {\n      var route = _ref.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref2) {\n          var focused = _ref2.focused,\n            color = _ref2.color,\n            size = _ref2.size;\n          var iconName;\n          if (route.name === 'Dashboard') {\n            iconName = focused ? 'home' : 'home-outline';\n          } else if (route.name === 'Messages') {\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\n          } else if (route.name === 'Profile') {\n            iconName = focused ? 'person' : 'person-outline';\n          } else {\n            iconName = 'help-outline';\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: theme.colors.primary,\n        tabBarInactiveTintColor: theme.colors.text,\n        tabBarStyle: {\n          backgroundColor: theme.colors.surface,\n          borderTopColor: theme.colors.border\n        },\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary,\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        }\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"Dashboard\",\n      component: DashboardScreen,\n      options: {\n        title: 'CLAIMIT'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Messages\",\n      component: MessagesScreen,\n      options: {\n        title: 'Messages'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"Profile\",\n      component: ProfileScreen,\n      options: {\n        title: 'Profile'\n      }\n    })]\n  });\n}\nfunction AdminTabNavigator() {\n  return _jsxs(Tab.Navigator, {\n    screenOptions: function screenOptions(_ref3) {\n      var route = _ref3.route;\n      return {\n        tabBarIcon: function tabBarIcon(_ref4) {\n          var focused = _ref4.focused,\n            color = _ref4.color,\n            size = _ref4.size;\n          var iconName;\n          if (route.name === 'AdminDashboard') {\n            iconName = focused ? 'analytics' : 'analytics-outline';\n          } else if (route.name === 'AdminItems') {\n            iconName = focused ? 'cube' : 'cube-outline';\n          } else if (route.name === 'AdminClaims') {\n            iconName = focused ? 'checkmark-circle' : 'checkmark-circle-outline';\n          } else if (route.name === 'AdminUsers') {\n            iconName = focused ? 'people' : 'people-outline';\n          } else {\n            iconName = 'help-outline';\n          }\n          return _jsx(Ionicons, {\n            name: iconName,\n            size: size,\n            color: color\n          });\n        },\n        tabBarActiveTintColor: theme.colors.primary,\n        tabBarInactiveTintColor: theme.colors.text,\n        tabBarStyle: {\n          backgroundColor: theme.colors.surface,\n          borderTopColor: theme.colors.border\n        },\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary,\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        }\n      };\n    },\n    children: [_jsx(Tab.Screen, {\n      name: \"AdminDashboard\",\n      component: AdminDashboardScreen,\n      options: {\n        title: 'Admin Dashboard'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"AdminItems\",\n      component: AdminItemsScreen,\n      options: {\n        title: 'Manage Items'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"AdminClaims\",\n      component: AdminClaimsScreen,\n      options: {\n        title: 'Review Claims'\n      }\n    }), _jsx(Tab.Screen, {\n      name: \"AdminUsers\",\n      component: AdminUsersScreen,\n      options: {\n        title: 'Manage Users'\n      }\n    })]\n  });\n}\nfunction AppNavigator() {\n  var _useAuth = useAuth(),\n    user = _useAuth.user,\n    isLoading = _useAuth.isLoading;\n  if (isLoading) {\n    return null;\n  }\n  if (!user) {\n    return _jsx(Stack.Navigator, {\n      screenOptions: {\n        headerShown: false\n      },\n      children: _jsx(Stack.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      })\n    });\n  }\n  if (user.role === 'admin') {\n    return _jsx(Drawer.Navigator, {\n      drawerContent: function drawerContent(props) {\n        return _jsx(CustomDrawerContent, _objectSpread({}, props));\n      },\n      screenOptions: {\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary,\n        headerTitleStyle: {\n          fontWeight: 'bold'\n        },\n        drawerStyle: {\n          backgroundColor: theme.colors.surface\n        },\n        drawerActiveTintColor: theme.colors.primary,\n        drawerInactiveTintColor: theme.colors.text\n      },\n      children: _jsx(Drawer.Screen, {\n        name: \"AdminTabs\",\n        component: AdminTabNavigator,\n        options: {\n          title: 'CLAIMIT Admin',\n          drawerLabel: 'Admin Dashboard',\n          drawerIcon: function drawerIcon(_ref5) {\n            var color = _ref5.color,\n              size = _ref5.size;\n            return _jsx(Ionicons, {\n              name: \"shield-checkmark\",\n              size: size,\n              color: color\n            });\n          }\n        }\n      })\n    });\n  }\n  return _jsx(Drawer.Navigator, {\n    drawerContent: function drawerContent(props) {\n      return _jsx(CustomDrawerContent, _objectSpread({}, props));\n    },\n    screenOptions: {\n      headerStyle: {\n        backgroundColor: theme.colors.primary\n      },\n      headerTintColor: theme.colors.onPrimary,\n      headerTitleStyle: {\n        fontWeight: 'bold'\n      },\n      drawerStyle: {\n        backgroundColor: theme.colors.surface\n      },\n      drawerActiveTintColor: theme.colors.primary,\n      drawerInactiveTintColor: theme.colors.text\n    },\n    children: _jsx(Drawer.Screen, {\n      name: \"MainTabs\",\n      component: MainTabNavigator,\n      options: {\n        title: 'CLAIMIT',\n        drawerLabel: 'Dashboard',\n        drawerIcon: function drawerIcon(_ref6) {\n          var color = _ref6.color,\n            size = _ref6.size;\n          return _jsx(Ionicons, {\n            name: \"home\",\n            size: size,\n            color: color\n          });\n        }\n      }\n    })\n  });\n}\nfunction RootStackNavigator() {\n  return _jsxs(Stack.Navigator, {\n    children: [_jsx(Stack.Screen, {\n      name: \"App\",\n      component: AppNavigator,\n      options: {\n        headerShown: false\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"ItemDetail\",\n      component: ItemDetailScreen,\n      options: {\n        title: 'Item Details',\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"ReportItem\",\n      component: ReportItemScreen,\n      options: {\n        title: 'Report Item',\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary\n      }\n    }), _jsx(Stack.Screen, {\n      name: \"ClaimProcess\",\n      component: ClaimProcessScreen,\n      options: {\n        title: 'Claim Process',\n        headerStyle: {\n          backgroundColor: theme.colors.primary\n        },\n        headerTintColor: theme.colors.onPrimary\n      }\n    })]\n  });\n}\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    fontsLoaded = _useState2[0],\n    setFontsLoaded = _useState2[1];\n  useEffect(function () {\n    function loadFonts() {\n      return _loadFonts.apply(this, arguments);\n    }\n    function _loadFonts() {\n      _loadFonts = _asyncToGenerator(function* () {\n        try {\n          yield Font.loadAsync({\n            'Roboto': require(\"./assets/fonts/Roboto-Regular.ttf\"),\n            'Roboto-Bold': require(\"./assets/fonts/Roboto-Bold.ttf\")\n          });\n          setFontsLoaded(true);\n        } catch (error) {\n          console.warn('Error loading fonts:', error);\n          setFontsLoaded(true);\n        }\n      });\n      return _loadFonts.apply(this, arguments);\n    }\n    loadFonts();\n  }, []);\n  useEffect(function () {\n    if (fontsLoaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded]);\n  if (!fontsLoaded) {\n    return null;\n  }\n  return _jsx(PaperProvider, {\n    theme: theme,\n    children: _jsxs(AuthProvider, {\n      children: [_jsx(NavigationContainer, {\n        children: _jsx(RootStackNavigator, {})\n      }), _jsx(Toast, {}), _jsx(StatusBar, {\n        style: \"light\",\n        backgroundColor: theme.colors.primary\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","StatusBar","NavigationContainer","createNativeStackNavigator","createBottomTabNavigator","createDrawerNavigator","Provider","PaperProvider","Ionicons","Toast","Font","SplashScreen","AuthProvider","useAuth","theme","LoginScreen","DashboardScreen","ItemDetailScreen","ReportItemScreen","ClaimProcessScreen","MessagesScreen","ProfileScreen","AdminDashboardScreen","AdminItemsScreen","AdminClaimsScreen","AdminUsersScreen","CustomDrawerContent","jsx","_jsx","jsxs","_jsxs","preventAutoHideAsync","Stack","Tab","Drawer","MainTabNavigator","Navigator","screenOptions","_ref","route","tabBarIcon","_ref2","focused","color","size","iconName","name","tabBarActiveTintColor","colors","primary","tabBarInactiveTintColor","text","tabBarStyle","backgroundColor","surface","borderTopColor","border","headerStyle","headerTintColor","onPrimary","headerTitleStyle","fontWeight","children","Screen","component","options","title","AdminTabNavigator","_ref3","_ref4","AppNavigator","_useAuth","user","isLoading","headerShown","role","drawerContent","props","_objectSpread","drawerStyle","drawerActiveTintColor","drawerInactiveTintColor","drawerLabel","drawerIcon","_ref5","_ref6","RootStackNavigator","App","_useState","_useState2","_slicedToArray","fontsLoaded","setFontsLoaded","loadFonts","_loadFonts","apply","arguments","_asyncToGenerator","loadAsync","require","error","console","warn","hideAsync","style"],"sources":["C:/Users/Asus/Desktop/Programming/ClaimIT/ClaimIT/mobile/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { StatusBar } from 'expo-status-bar';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport { createDrawerNavigator } from '@react-navigation/drawer';\r\nimport { Provider as PaperProvider } from 'react-native-paper';\r\nimport { Ionicons } from '@expo/vector-icons';\r\nimport Toast from 'react-native-toast-message';\r\nimport * as Font from 'expo-font';\r\nimport * as SplashScreen from 'expo-splash-screen';\r\n\r\nimport { AuthProvider, useAuth } from './src/context/AuthContext';\r\nimport { theme } from './src/theme/theme';\r\n\r\n// Screens\r\nimport LoginScreen from './src/screens/auth/LoginScreen';\r\nimport DashboardScreen from './src/screens/main/DashboardScreen';\r\nimport ItemDetailScreen from './src/screens/main/ItemDetailScreen';\r\nimport ReportItemScreen from './src/screens/main/ReportItemScreen';\r\nimport ClaimProcessScreen from './src/screens/main/ClaimProcessScreen';\r\nimport MessagesScreen from './src/screens/main/MessagesScreen';\r\nimport ProfileScreen from './src/screens/main/ProfileScreen';\r\nimport AdminDashboardScreen from './src/screens/admin/AdminDashboardScreen';\r\nimport AdminItemsScreen from './src/screens/admin/AdminItemsScreen';\r\nimport AdminClaimsScreen from './src/screens/admin/AdminClaimsScreen';\r\nimport AdminUsersScreen from './src/screens/admin/AdminUsersScreen';\r\n\r\n// Custom Drawer Content\r\nimport CustomDrawerContent from './src/components/CustomDrawerContent';\r\n\r\n// Keep the splash screen visible while we fetch resources\r\nSplashScreen.preventAutoHideAsync();\r\n\r\nconst Stack = createNativeStackNavigator();\r\nconst Tab = createBottomTabNavigator();\r\nconst Drawer = createDrawerNavigator();\r\n\r\n// Main Tab Navigator\r\nfunction MainTabNavigator() {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName: keyof typeof Ionicons.glyphMap;\r\n\r\n          if (route.name === 'Dashboard') {\r\n            iconName = focused ? 'home' : 'home-outline';\r\n          } else if (route.name === 'Messages') {\r\n            iconName = focused ? 'chatbubbles' : 'chatbubbles-outline';\r\n          } else if (route.name === 'Profile') {\r\n            iconName = focused ? 'person' : 'person-outline';\r\n          } else {\r\n            iconName = 'help-outline';\r\n          }\r\n\r\n          return <Ionicons name={iconName} size={size} color={color} />;\r\n        },\r\n        tabBarActiveTintColor: theme.colors.primary,\r\n        tabBarInactiveTintColor: theme.colors.text,\r\n        tabBarStyle: {\r\n          backgroundColor: theme.colors.surface,\r\n          borderTopColor: theme.colors.border,\r\n        },\r\n        headerStyle: {\r\n          backgroundColor: theme.colors.primary,\r\n        },\r\n        headerTintColor: theme.colors.onPrimary,\r\n        headerTitleStyle: {\r\n          fontWeight: 'bold',\r\n        },\r\n      })}\r\n    >\r\n      <Tab.Screen \r\n        name=\"Dashboard\" \r\n        component={DashboardScreen}\r\n        options={{ title: 'CLAIMIT' }}\r\n      />\r\n      <Tab.Screen \r\n        name=\"Messages\" \r\n        component={MessagesScreen}\r\n        options={{ title: 'Messages' }}\r\n      />\r\n      <Tab.Screen \r\n        name=\"Profile\" \r\n        component={ProfileScreen}\r\n        options={{ title: 'Profile' }}\r\n      />\r\n    </Tab.Navigator>\r\n  );\r\n}\r\n\r\n// Admin Tab Navigator\r\nfunction AdminTabNavigator() {\r\n  return (\r\n    <Tab.Navigator\r\n      screenOptions={({ route }) => ({\r\n        tabBarIcon: ({ focused, color, size }) => {\r\n          let iconName: keyof typeof Ionicons.glyphMap;\r\n\r\n          if (route.name === 'AdminDashboard') {\r\n            iconName = focused ? 'analytics' : 'analytics-outline';\r\n          } else if (route.name === 'AdminItems') {\r\n            iconName = focused ? 'cube' : 'cube-outline';\r\n          } else if (route.name === 'AdminClaims') {\r\n            iconName = focused ? 'checkmark-circle' : 'checkmark-circle-outline';\r\n          } else if (route.name === 'AdminUsers') {\r\n            iconName = focused ? 'people' : 'people-outline';\r\n          } else {\r\n            iconName = 'help-outline';\r\n          }\r\n\r\n          return <Ionicons name={iconName} size={size} color={color} />;\r\n        },\r\n        tabBarActiveTintColor: theme.colors.primary,\r\n        tabBarInactiveTintColor: theme.colors.text,\r\n        tabBarStyle: {\r\n          backgroundColor: theme.colors.surface,\r\n          borderTopColor: theme.colors.border,\r\n        },\r\n        headerStyle: {\r\n          backgroundColor: theme.colors.primary,\r\n        },\r\n        headerTintColor: theme.colors.onPrimary,\r\n        headerTitleStyle: {\r\n          fontWeight: 'bold',\r\n        },\r\n      })}\r\n    >\r\n      <Tab.Screen \r\n        name=\"AdminDashboard\" \r\n        component={AdminDashboardScreen}\r\n        options={{ title: 'Admin Dashboard' }}\r\n      />\r\n      <Tab.Screen \r\n        name=\"AdminItems\" \r\n        component={AdminItemsScreen}\r\n        options={{ title: 'Manage Items' }}\r\n      />\r\n      <Tab.Screen \r\n        name=\"AdminClaims\" \r\n        component={AdminClaimsScreen}\r\n        options={{ title: 'Review Claims' }}\r\n      />\r\n      <Tab.Screen \r\n        name=\"AdminUsers\" \r\n        component={AdminUsersScreen}\r\n        options={{ title: 'Manage Users' }}\r\n      />\r\n    </Tab.Navigator>\r\n  );\r\n}\r\n\r\n// Main App Navigator\r\nfunction AppNavigator() {\r\n  const { user, isLoading } = useAuth();\r\n\r\n  if (isLoading) {\r\n    return null; // Splash screen will be shown\r\n  }\r\n\r\n  if (!user) {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"Login\" component={LoginScreen} />\r\n      </Stack.Navigator>\r\n    );\r\n  }\r\n\r\n  // Admin users get admin drawer navigator\r\n  if (user.role === 'admin') {\r\n    return (\r\n      <Drawer.Navigator\r\n        drawerContent={(props) => <CustomDrawerContent {...props} />}\r\n        screenOptions={{\r\n          headerStyle: {\r\n            backgroundColor: theme.colors.primary,\r\n          },\r\n          headerTintColor: theme.colors.onPrimary,\r\n          headerTitleStyle: {\r\n            fontWeight: 'bold',\r\n          },\r\n          drawerStyle: {\r\n            backgroundColor: theme.colors.surface,\r\n          },\r\n          drawerActiveTintColor: theme.colors.primary,\r\n          drawerInactiveTintColor: theme.colors.text,\r\n        }}\r\n      >\r\n        <Drawer.Screen \r\n          name=\"AdminTabs\" \r\n          component={AdminTabNavigator}\r\n          options={{ \r\n            title: 'CLAIMIT Admin',\r\n            drawerLabel: 'Admin Dashboard',\r\n            drawerIcon: ({ color, size }) => (\r\n              <Ionicons name=\"shield-checkmark\" size={size} color={color} />\r\n            ),\r\n          }}\r\n        />\r\n      </Drawer.Navigator>\r\n    );\r\n  }\r\n\r\n  // Regular users get main drawer navigator\r\n  return (\r\n    <Drawer.Navigator\r\n      drawerContent={(props) => <CustomDrawerContent {...props} />}\r\n      screenOptions={{\r\n        headerStyle: {\r\n          backgroundColor: theme.colors.primary,\r\n        },\r\n        headerTintColor: theme.colors.onPrimary,\r\n        headerTitleStyle: {\r\n          fontWeight: 'bold',\r\n        },\r\n        drawerStyle: {\r\n          backgroundColor: theme.colors.surface,\r\n        },\r\n        drawerActiveTintColor: theme.colors.primary,\r\n        drawerInactiveTintColor: theme.colors.text,\r\n      }}\r\n    >\r\n      <Drawer.Screen \r\n        name=\"MainTabs\" \r\n        component={MainTabNavigator}\r\n        options={{ \r\n          title: 'CLAIMIT',\r\n          drawerLabel: 'Dashboard',\r\n          drawerIcon: ({ color, size }) => (\r\n            <Ionicons name=\"home\" size={size} color={color} />\r\n          ),\r\n        }}\r\n      />\r\n    </Drawer.Navigator>\r\n  );\r\n}\r\n\r\n// Root Stack Navigator for modals and other screens\r\nfunction RootStackNavigator() {\r\n  return (\r\n    <Stack.Navigator>\r\n      <Stack.Screen \r\n        name=\"App\" \r\n        component={AppNavigator}\r\n        options={{ headerShown: false }}\r\n      />\r\n      <Stack.Screen \r\n        name=\"ItemDetail\" \r\n        component={ItemDetailScreen}\r\n        options={{ \r\n          title: 'Item Details',\r\n          headerStyle: { backgroundColor: theme.colors.primary },\r\n          headerTintColor: theme.colors.onPrimary,\r\n        }}\r\n      />\r\n      <Stack.Screen \r\n        name=\"ReportItem\" \r\n        component={ReportItemScreen}\r\n        options={{ \r\n          title: 'Report Item',\r\n          headerStyle: { backgroundColor: theme.colors.primary },\r\n          headerTintColor: theme.colors.onPrimary,\r\n        }}\r\n      />\r\n      <Stack.Screen \r\n        name=\"ClaimProcess\" \r\n        component={ClaimProcessScreen}\r\n        options={{ \r\n          title: 'Claim Process',\r\n          headerStyle: { backgroundColor: theme.colors.primary },\r\n          headerTintColor: theme.colors.onPrimary,\r\n        }}\r\n      />\r\n    </Stack.Navigator>\r\n  );\r\n}\r\n\r\nexport default function App() {\r\n  const [fontsLoaded, setFontsLoaded] = useState(false);\r\n\r\n  useEffect(() => {\r\n    async function loadFonts() {\r\n      try {\r\n        await Font.loadAsync({\r\n          'Roboto': require('./assets/fonts/Roboto-Regular.ttf'),\r\n          'Roboto-Bold': require('./assets/fonts/Roboto-Bold.ttf'),\r\n        });\r\n        setFontsLoaded(true);\r\n      } catch (error) {\r\n        console.warn('Error loading fonts:', error);\r\n        setFontsLoaded(true); // Continue even if fonts fail to load\r\n      }\r\n    }\r\n\r\n    loadFonts();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (fontsLoaded) {\r\n      SplashScreen.hideAsync();\r\n    }\r\n  }, [fontsLoaded]);\r\n\r\n  if (!fontsLoaded) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <PaperProvider theme={theme}>\r\n      <AuthProvider>\r\n        <NavigationContainer>\r\n          <RootStackNavigator />\r\n        </NavigationContainer>\r\n        <Toast />\r\n        <StatusBar style=\"light\" backgroundColor={theme.colors.primary} />\r\n      </AuthProvider>\r\n    </PaperProvider>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}